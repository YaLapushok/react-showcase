version: '3.8'

services:
  backend:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile
    container_name: backend_service
    env_file:
      - ./apps/backend/.env
    environment:
      NODE_ENV: development
      PORT: ${PORT:-5000}
      JWT_SECRET: ${JWT_SECRET:-7a3b9d8c1e5f6a2b4d8e1f0a}
      DATABASE_URL: postgresql://${DB_USER:-user}:${DB_PASSWORD:-password}@${DB_HOST:-db}:${DB_PORT:-5432}/${DB_NAME:-email_scheduler_db}
      REDIS_URL: redis://${REDIS_HOST:-redis}:${REDIS_PORT:-6379}
      CLIENT_URL: ${CLIENT_URL:-http://localhost:3000}
      DEVICE_HOST: ${DEVICE_HOST:-mock-device}
      DEVICE_PORT: ${DEVICE_PORT:-6000}
    ports:
      - "5000:5000"
    volumes:
      - ./apps/backend/src:/app/src
    depends_on:
      - db
      - redis
      - mock-device
    networks:
      - app-network

  frontend:
    build:
      context: ./apps/frontend
      dockerfile: Dockerfile
    container_name: frontend_service
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - app-network

  db:
    image: postgres:15
    container_name: postgres_db
    environment:
      POSTGRES_USER: ${DB_USER:-user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
      POSTGRES_DB: ${DB_NAME:-email_scheduler_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - app-network

  redis:
    image: redis:7-alpine
    container_name: redis_cache
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - app-network

  mock-device:
    build:
      context: .
      dockerfile: Dockerfile.mock
    container_name: mock_device_simulator
    hostname: mock-device
    ports:
      - "6000:6000"
    networks:
      - app-network

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge 